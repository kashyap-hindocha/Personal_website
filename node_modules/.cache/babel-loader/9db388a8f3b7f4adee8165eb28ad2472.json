{"ast":null,"code":"/**\r\n * Builds a record object by attaching necessary field(s)\r\n * @param data Data to store\r\n */\nexport const buildRecordObject = data => {\n  return {\n    data,\n    lastChecked: Date.now()\n  };\n};\n/**\r\n * Returns true if the record has expired\r\n * otherwise returns false\r\n * @param record Local storage record\r\n * @param timeout Timeout in minutes\r\n */\n\nexport const isRecordExpired = (record, timeout) => {\n  return Date.now() > record.lastChecked + timeout * 60 * 1000;\n};\n/**\r\n * Returns true if the record is \"usable\"\r\n * otherwise returns false\r\n * @param record Local storage record\r\n * @param timeout Timeout in minutes\r\n */\n\nexport const isRecordUsable = (record, timeout) => {\n  return record.data !== undefined && !isRecordExpired(record, timeout);\n};","map":{"version":3,"sources":["D:/Office/Project/www/nginx/html/Personal-Projects/portfolio-app/src/utils/localStorage.ts"],"names":["buildRecordObject","data","lastChecked","Date","now","isRecordExpired","record","timeout","isRecordUsable","undefined"],"mappings":"AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMA,iBAAiB,GAAOC,IAAJ,IAAgB;AAC/C,SAAO;AACLA,IAAAA,IADK;AAELC,IAAAA,WAAW,EAAEC,IAAI,CAACC,GAAL;AAFR,GAAP;AAID,CALM;AAOP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,eAAe,GAAG,CAC7BC,MAD6B,EAE7BC,OAF6B,KAG1B;AACH,SAAOJ,IAAI,CAACC,GAAL,KAAaE,MAAM,CAACJ,WAAP,GAAqBK,OAAO,GAAG,EAAV,GAAe,IAAxD;AACD,CALM;AAOP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAG,CAC5BF,MAD4B,EAE5BC,OAF4B,KAGzB;AACH,SAAOD,MAAM,CAACL,IAAP,KAAgBQ,SAAhB,IAA6B,CAACJ,eAAe,CAACC,MAAD,EAASC,OAAT,CAApD;AACD,CALM","sourcesContent":["import { LocalCache } from '../models';\r\n\r\n/**\r\n * Builds a record object by attaching necessary field(s)\r\n * @param data Data to store\r\n */\r\nexport const buildRecordObject = <T>(data: T) => {\r\n  return {\r\n    data,\r\n    lastChecked: Date.now(),\r\n  } as LocalCache.Record<T>;\r\n};\r\n\r\n/**\r\n * Returns true if the record has expired\r\n * otherwise returns false\r\n * @param record Local storage record\r\n * @param timeout Timeout in minutes\r\n */\r\nexport const isRecordExpired = <T>(\r\n  record: LocalCache.Record<T>,\r\n  timeout: number,\r\n) => {\r\n  return Date.now() > record.lastChecked + timeout * 60 * 1000;\r\n};\r\n\r\n/**\r\n * Returns true if the record is \"usable\"\r\n * otherwise returns false\r\n * @param record Local storage record\r\n * @param timeout Timeout in minutes\r\n */\r\nexport const isRecordUsable = <T>(\r\n  record: LocalCache.Record<T>,\r\n  timeout: number,\r\n) => {\r\n  return record.data !== undefined && !isRecordExpired(record, timeout);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}