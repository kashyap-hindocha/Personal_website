{"ast":null,"code":"var _jsxFileName = \"D:\\\\Office\\\\Project\\\\www\\\\nginx\\\\html\\\\Personal-Projects\\\\portfolio-app\\\\src\\\\components\\\\GHButton\\\\index.tsx\";\n\n/**\r\n * Generic GHButton component.\r\n */\nimport React, { useState, useEffect } from 'react';\nimport { useLocalStorageState } from '../../hooks';\nimport ButtonLink from '../ButtonLink';\nimport { buildRecordObject, isRecordUsable } from '../../utils';\n\nconst GHButton = _ref => {\n  let {\n    resource: {\n      attr,\n      endpoint\n    },\n    timeout = 10,\n    // 10 mins\n    ...btnProps\n  } = _ref;\n  const [loading, setLoading] = useState(false);\n  const [attrCountRecord, setAttrCountRecord] = useLocalStorageState(attr, undefined);\n  useEffect(() => {\n    const fetchApi = async () => {\n      const response = await fetch(endpoint);\n      const json = await response.json();\n\n      if (json[attr] >= 0) {\n        setAttrCountRecord(buildRecordObject(json[attr]));\n      }\n\n      setLoading(false);\n    };\n\n    if (!isRecordUsable(attrCountRecord, timeout)) {\n      fetchApi();\n    }\n  });\n  return /*#__PURE__*/React.createElement(ButtonLink, Object.assign({}, btnProps, {\n    showCount: !loading && attrCountRecord !== undefined,\n    count: attrCountRecord.data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default GHButton;","map":{"version":3,"sources":["D:/Office/Project/www/nginx/html/Personal-Projects/portfolio-app/src/components/GHButton/index.tsx"],"names":["React","useState","useEffect","useLocalStorageState","ButtonLink","buildRecordObject","isRecordUsable","GHButton","resource","attr","endpoint","timeout","btnProps","loading","setLoading","attrCountRecord","setAttrCountRecord","undefined","fetchApi","response","fetch","json","data"],"mappings":";;AAAA;AACA;AACA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,oBAAT,QAAqC,aAArC;AACA,OAAOC,UAAP,MAA4C,eAA5C;AAEA,SAASC,iBAAT,EAA4BC,cAA5B,QAAkD,aAAlD;;AASA,MAAMC,QAAmD,GAAG,QAItD;AAAA,MAJuD;AAC3DC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KADiD;AAE3DC,IAAAA,OAAO,GAAG,EAFiD;AAE7C;AACd,OAAGC;AAHwD,GAIvD;AACJ,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACc,eAAD,EAAkBC,kBAAlB,IAAwCb,oBAAoB,CAEhEM,IAFgE,EAE1DQ,SAF0D,CAAlE;AAIAf,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,QAAQ,GAAG,YAA0B;AACzC,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACV,QAAD,CAA5B;AACA,YAAMW,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAnB;;AAEA,UAAIA,IAAI,CAACZ,IAAD,CAAJ,IAAc,CAAlB,EAAqB;AACnBO,QAAAA,kBAAkB,CAACX,iBAAiB,CAACgB,IAAI,CAACZ,IAAD,CAAL,CAAlB,CAAlB;AACD;;AAEDK,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KATD;;AAWA,QAAI,CAACR,cAAc,CAACS,eAAD,EAAkBJ,OAAlB,CAAnB,EAA+C;AAC7CO,MAAAA,QAAQ;AACT;AACF,GAfQ,CAAT;AAiBA,sBACE,oBAAC,UAAD,oBACMN,QADN;AAEE,IAAA,SAAS,EAAE,CAACC,OAAD,IAAYE,eAAe,KAAKE,SAF7C;AAGE,IAAA,KAAK,EAAEF,eAAe,CAACO,IAHzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAOD,CAlCD;;AAoCA,eAAef,QAAf","sourcesContent":["/**\r\n * Generic GHButton component.\r\n */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useLocalStorageState } from '../../hooks';\r\nimport ButtonLink, { ButtonLinkProps } from '../ButtonLink';\r\nimport { LocalCache } from '../../models';\r\nimport { buildRecordObject, isRecordUsable } from '../../utils';\r\n\r\nexport interface GHButtonProps extends ButtonLinkProps {\r\n  resource: {\r\n    endpoint: string;\r\n    attr: string;\r\n  };\r\n}\r\n\r\nconst GHButton: React.FC<GHButtonProps & LocalCache.Prop> = ({\r\n  resource: { attr, endpoint },\r\n  timeout = 10, // 10 mins\r\n  ...btnProps\r\n}) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [attrCountRecord, setAttrCountRecord] = useLocalStorageState<\r\n    number | undefined\r\n  >(attr, undefined);\r\n\r\n  useEffect(() => {\r\n    const fetchApi = async (): Promise<any> => {\r\n      const response = await fetch(endpoint);\r\n      const json = await response.json();\r\n\r\n      if (json[attr] >= 0) {\r\n        setAttrCountRecord(buildRecordObject(json[attr]));\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n\r\n    if (!isRecordUsable(attrCountRecord, timeout)) {\r\n      fetchApi();\r\n    }\r\n  });\r\n\r\n  return (\r\n    <ButtonLink\r\n      {...btnProps}\r\n      showCount={!loading && attrCountRecord !== undefined}\r\n      count={attrCountRecord.data}\r\n    />\r\n  );\r\n};\r\n\r\nexport default GHButton;\r\n"]},"metadata":{},"sourceType":"module"}